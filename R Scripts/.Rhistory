print (test_series)
test_info = get_company_info(sac, list('AAPL', 'MSFT'), list('exchange', 'industry'))
test_points = get_company_data_point(sac, list('AAPL', 'MSFT'), list('price', 'pe_ratio'), '2016-03-03')
test_series = get_company_data_timeseries(sac, list('AAPL', 'MSFT'), list('price'), '2016-3-3', '2016-3-15')
print (test_info)
print (test_points)
print (test_series)
print(aapl)
setwd("~/GitHub/Finance_R_Files")
setwd("~/GitHub/Finance_R_Files/R Scripts")
=======
get_company_data_point(.Object = ,"AAPL")
list(objects)
list(.Objects)
get_company_data_point(,"AAPL")
get_company_data_point(setMethod(),"AAPL")
get_company_data_point(data.frame(),"AAPL")
sac = new ("YChartsApiClient", api_key=' OK/bRlCfem/K+BXruue8Ng') # Enter the Key here. See http://ycharts.com/accounts/my_account
test_info = get_company_info(sac, list('AAPL', 'MSFT'), list('exchange', 'industry'))
test_points = get_company_data_point(sac, list('AAPL', 'MSFT'), list('price', 'pe_ratio'), '2016-03-03')
test_series = get_company_data_timeseries(sac, list('AAPL', 'MSFT'), list('price'), '2016-3-3', '2016-3-15')
sac = new ("YChartsApiClient", api_key=' OK/bRlCfem/K+BXruue8Ng')
test_info = get_company_info(sac, list('AAPL', 'MSFT'), list('exchange', 'industry'))
print (test_info)
rm(gdp_
)
rm(GDP)
View(gdp)
rm(gdp)
test_info = get_company_info(sac, list('AAPL', 'MSFT'), list('exchange', 'industry'))
sac = new ("YChartsApiClient", api_key='OK/bRlCfem/K+BXruue8Ng')
test_info = get_company_info(sac, list('AAPL', 'MSFT'), list('exchange', 'industry'))
>>>>>>> origin/master
library(quantmod)
library(tseries)
startdate = "2016-01-01"
p.spy <- na.locf(get.hist.quote("SPY", quote="Adj", start=startdate, retclass="zoo"))
p.spy <- dataframe(p.spy)
p.spy <- data.frame(p.spy)
View(p.spy)
t.spy <- get.hist.quote("SPY", quote="Adj", start=startdate, retclass="zoo")
t.spy <- data.frame(t.spy)
View(t.spy)
View(t.spy)
rm(t.spy)
r.spy <- data.frame(exp(diff(log(p.spy)))-1)
r.spy <- exp(diff(log(p.spy)))-1
p.spy <- get.hist.quote("SPY", quote="Adj", start=startdate, retclass="zoo")
p1.spy <- na.locf(p.spy)               # Copy last traded price when NA
r.spy <- exp(diff(log(p1.spy)))-1
r.spy<- data.frame(r.spy)
startdate = "2016-01-01"
p.dia <- na.locf(get.hist.quote("DIA", quote="Adj", start=startdate, retclass="zoo"))
r.dia <- exp(diff(log(p.dia)))-1
r.dia <- data.frame(r.dia)
startdate = "2016-01-01"
p.agg <- na.locf(get.hist.quote("AGG", quote="Adj", start=startdate, retclass="zoo"))
r.agg <- exp(diff(log(p.agg)))-1
r.agg <- data.frame(r.agg)
d <- data.frame(r.agg=rnorm(10),
r.dia=rnorm(10),
r.spy=rnorm(10))
cor(d) # get correlations (returns matrix)
d <- data.frame(r.agg=rnorm(181),
r.dia=rnorm(181),
r.spy=rnorm(181))
cor(d) # get correlations (returns matrix)
View(r.agg)
View(r.dia)
View(r.spy)
plot(r.dia,r.spy,r.agg)
plot(r.dia)
plot(p.agg,p.dia,p.spy)
View(d)
install.packages(corrplot)
M <- cor(d) # get correlations
library('corrplot') #package corrplot
corrplot(M, method = "circle") #plot matrix
cor(r.agg,r.dia)
a.x <- get.hist.quote(a, quote="Adj", start=startdate, retclass="zoo")
a.x <- get.hist.quote("a", quote="Adj", start=startdate, retclass="zoo")
a.x <- na.locf(a.x)
a.x <- exp(diff(log(a.x)))-1
a.x <- data.frame(a.x)
View(a.x)
View(a.x)
View(r.spy)
View(r.spy)
a.x <- get.hist.quote("a", quote="Adj", start=startdate, retclass="zoo")
spy <- get.hist.quote("SPY", quote="Adj", start=startdate, retclass="zoo")
spy <- data.frame(spy)
a.x <- data.frame(a.x)
View(a.x)
View(a.x)
View(spy)
View(spy)
View(spy)
View(r.spy)
(198.2888/197.9539)-1
rm(a.x,d,M,r.agg,r.dia,r.spy,spy,p.agg,p.dia,p.spy)
p1.spy
rm(p1.spy)
rm(p1.spy)
p.A <- get.hist.quote("SPY", quote="Adj", start=startdate, retclass="zoo")
p1.A <- na.locf(p.A)               # Copy last traded price when NA
r.A <- exp(diff(log(p.A)))-1
Aret <- data.frame(r.A)
View(Aret)
123 <- "SPY"
p.B <- get.hist.quote(123, quote="Adj", start=startdate, retclass="zoo")
p1.B <- na.locf(p.B)               # Copy last traded price when NA
r.B <- exp(diff(log(p.B)))-1
Bret <- data.frame(r.B)
rtgfa <- "SPY"
p.B <- get.hist.quote(123, quote="Adj", start=startdate, retclass="zoo")
p1.B <- na.locf(p.B)               # Copy last traded price when NA
r.B <- exp(diff(log(p.B)))-1
Bret <- data.frame(r.B)
rtgfa <- "SPY"
p.B <- get.hist.quote(rtgfa, quote="Adj", start=startdate, retclass="zoo")
p1.B <- na.locf(p.B)               # Copy last traded price when NA
r.B <- exp(diff(log(p.B)))-1
Bret <- data.frame(r.B)
View(Bret)
View(Aret)
Bret <- data.frame(r.B)
B <- "SPY"
p.B <- get.hist.quote(B, quote="Adj", start=startdate, retclass="zoo")
p1.B <- na.locf(p.B)               # Copy last traded price when NA
r.B <- exp(diff(log(p.B)))-1
Bret <- data.frame(r.B)
View(Aret)
View(Bret)
startdate = "2016-01-01"
A <- "EEM"
B <- "TLT"
C <- "HYG
"
p.A <- get.hist.quote(A, quote="Adj", start=startdate, retclass="zoo")
p1.A <- na.locf(p.A)               # Copy last traded price when NA
r.A <- exp(diff(log(p.A)))-1
Aret <- data.frame(r.A)
p.B <- get.hist.quote(B, quote="Adj", start=startdate, retclass="zoo")
p1.B <- na.locf(p.B)               # Copy last traded price when NA
r.B <- exp(diff(log(p.B)))-1
Bret <- data.frame(r.B)
p.C <- get.hist.quote(C, quote="Adj", start=startdate, retclass="zoo")
p1.C <- na.locf(p.C)               # Copy last traded price when NA
r.C <- exp(diff(log(p.C)))-1
Bret <- data.frame(r.C)
A <- "EEM"
B <- "TLT"
C <- "HYG"
p.A <- get.hist.quote(A, quote="Adj", start=startdate, retclass="zoo")
p1.A <- na.locf(p.A)               # Copy last traded price when NA
r.A <- exp(diff(log(p.A)))-1
Aret <- data.frame(r.A)
p.B <- get.hist.quote(B, quote="Adj", start=startdate, retclass="zoo")
p1.B <- na.locf(p.B)               # Copy last traded price when NA
r.B <- exp(diff(log(p.B)))-1
Bret <- data.frame(r.B)
p.C <- get.hist.quote(C, quote="Adj", start=startdate, retclass="zoo")
p1.C <- na.locf(p.C)               # Copy last traded price when NA
r.C <- exp(diff(log(p.C)))-1
Cret <- data.frame(r.C)
cor(eem)
cor(Cret,Bret)
View(Aret)
View(Aret)
View(Bret)
View(Cret)
View(Bret)
View(Aret)
prices1 <- get.hist.quote("SPY", quote="Adj", start="2005-12-25", retclass="zoo")
prices1 <- na.locf(prices1)               # Copy last traded price when NA
# To make week end prices:
nextfri.Date <- function(x) 7 * ceiling(as.numeric(x - 1)/7) + as.Date(1)
weekly.prices <- aggregate(prices, nextfri.Date,tail,1)
# To convert month end prices:
monthly.prices <- aggregate(prices1, as.yearmon, tail, 1)
# Convert weekly prices into weekly returns
r.weekly <- diff(log(weekly.prices)) # convert prices to log returns
r1.weekly <- exp(r.weekly)-1          # back to simple returns
# Convert monthly prices into monthly returns
r.monthly <- diff(log(monthly.prices))  # convert prices to log returns
r1.monthly <- exp(r.monthly)-1          # back to simple returns
prices1 <- get.hist.quote("SPY", quote="Adj", start="2005-12-25", retclass="zoo")
prices1 <- na.locf(prices1)               # Copy last traded price when NA
# To make week end prices:
nextfri.Date <- function(x) 7 * ceiling(as.numeric(x - 1)/7) + as.Date(1)
weekly.prices <- aggregate(prices1, nextfri.Date,tail,1)
# To convert month end prices:
monthly.prices <- aggregate(prices1, as.yearmon, tail, 1)
# Convert weekly prices into weekly returns
r.weekly <- diff(log(weekly.prices)) # convert prices to log returns
r1.weekly <- exp(r.weekly)-1          # back to simple returns
# Convert monthly prices into monthly returns
r.monthly <- diff(log(monthly.prices))  # convert prices to log returns
r1.monthly <- exp(r.monthly)-1          # back to simple returns
EEM <- "EEM"
p.A <- get.hist.quote(A, quote="Adj", start=startdate, retclass="zoo")
p1.A <- na.locf(p.A)               # Copy last traded price when NA
# To make week end prices:
nextfri.Date <- function(x) 7 * ceiling(as.numeric(x - 1)/7) + as.Date(1)
pwk.A <- aggregate(p1.A, nextfri.Date,tail,1)
# To convert month end prices:
pmo.A <- aggregate(p1.A, as.yearmon, tail, 1)
# Convert weekly prices into weekly returns
rwk.A <- diff(log(pwk.A)) # convert prices to log returns
rwk1.A <- exp(rwk.A)-1          # back to simple returns
Aretwk <- data.frame(rwk1.A)
# Convert monthly prices into monthly returns
rmo.A <- diff(log(pmo.A))  # convert prices to log returns
rmo1.A <- exp(rmo.A)-1          # back to simple returns
Aretmo <- data.frame(rmo1.A)
EEM <- Aretmo
View(EEM)
View(Aret)
View(Aret)
View(Bret)
d <- data.frame(Aret=rnorm(181),
Bret=rnorm(181),
Cret=rnorm(181))
cor(d) # get correlations (returns matrix)
EEM <- Aret
TLT <- Bret
HYG <- Cret
d <- data.frame(EEM,TLT,HYG)
cor(d) # get correlations (returns matrix)
View(d)
MovingCor <- function(EEM, TLT, window.size=21, method="pearson") {
n <- length(30)
# Setup a few catches for error handling.
if (TRUE %in% is.na(y) || TRUE %in% is.na(x)) {
stop("Arguments x and y cannot have missing values.")
}
if (n &lt;= 1 || n != length(y)) {
stop("Arguments x and y have different lengths: ",
length(x), " and ", length(y), ".")
}
out <- rep(NA, round(window.size/2))  # Stuffing the returned vector.
for (value in seq(from = 1, to = n - (window.size - 1))) {
value.end &lt;- value + (window.size - 1)
out <- append(out, cor(x[value:value.end],
y[value:value.end],
method = method))
}
out <- append(out, rep(NA, n - length(out)))  # Finish stuffing.
return(out)
MovingCor <- function(x, y, window.size=21, method="pearson") {
n <- length(x)
}
View(MovingCor)
n <- length(x)
n <- length(30)
if (TRUE %in% is.na(y) || TRUE %in% is.na(x)) {
stop("Arguments x and y cannot have missing values.")
}
if (n &lt;= 1 || n != length(y)) {
stop("Arguments x and y have different lengths: ",
length(x), " and ", length(y), ".")}
out <- rep(NA, round(window.size/2))  # Stuffing the returned vector.
for (value in seq(from = 1, to = n - (window.size - 1)))
{value.end &lt;- value + (window.size - 1)
out <- append(out, cor(x[value:value.end],
y[value:value.end],
method = method))}
out <- append(out, rep(NA, n - length(out)))  # Finish stuffing.
return(out)}
MovingCor <- function(x, y, window.size=21, method="pearson") {
n <- length(x)
# Setup a few catches for error handling.
if (TRUE %in% is.na(y) || TRUE %in% is.na(x)) {
stop("Arguments x and y cannot have missing values.")
}
if (n &lt;= 1 || n != length(y)) {
stop("Arguments x and y have different lengths: ",
length(x), " and ", length(y), ".")}
out <- rep(NA, round(window.size/2))  # Stuffing the returned vector.
for (value in seq(from = 1, to = n - (window.size - 1)))
{value.end &lt;- value + (window.size - 1)
out <- append(out, cor(x[value:value.end],
y[value:value.end],
method = method))}
out <- append(out, rep(NA, n - length(out)))  # Finish stuffing.
return(out)}
x <- EEM
y <- TLT
MovingCor <- function(x, y, window.size=21, method="pearson") {
n <- length(x)
# Setup a few catches for error handling.
if (TRUE %in% is.na(y) || TRUE %in% is.na(x)) {
stop("Arguments x and y cannot have missing values.")
}
if (n &lt;= 1 || n != length(y)) {
stop("Arguments x and y have different lengths: ",
length(x), " and ", length(y), ".")}
out <- rep(NA, round(window.size/2))  # Stuffing the returned vector.
for (value in seq(from = 1, to = n - (window.size - 1)))
{value.end &lt;- value + (window.size - 1)
out <- append(out, cor(x[value:value.end],
y[value:value.end],
method = method))}
out <- append(out, rep(NA, n - length(out)))  # Finish stuffing.
return(out)}
gld <- get.hist.quote(instrument="GLD", start="2003-01-01",
end=Sys.Date(), quote="AdjClose",
provider="yahoo", origin="1970-01-01",
compression="d", retclass="zoo")
z <- merge.zoo(spy,ief,gld)
colnames(z) <- c("SPY","IEF","GLD")
z.logrtn <- diff(log(z))
spy <- get.hist.quote(instrument="spy", start="2003-01-01",
end=Sys.Date(), quote="AdjClose",
provider="yahoo", origin="1970-01-01",
compression="d", retclass="zoo")
ief <- get.hist.quote(instrument="ief", start="2003-01-01",
end=Sys.Date(), quote="AdjClose",
provider="yahoo", origin="1970-01-01",
compression="d", retclass="zoo")
z <- merge.zoo(spy,ief,gld)
colnames(z) <- c("SPY","IEF","GLD")
z.logrtn <- diff(log(z))
c <- cor(z.logrtn,use="complete.obs")
ut <- upper.tri(c)
n <- paste(rownames(c)[row(c)[ut]],rownames(c)[col(c)[ut]])
rollingcorr.1m <- rollapply(z.logrtn,
width=30,
FUN = function(Z)
{
return(cor(Z,use="pairwise.complete.obs")[ut])
},
by.column=FALSE, align="right")
colnames(rollingcorr.1m) <- n
rollingcorr.1m.df <- fortify(rollingcorr.1m,melt=TRUE)
ggplot(rollingcorr.1m.df,aes(x=Index)) +
geom_ribbon(aes(ymin=0,ymax=Value)) +
facet_grid(Series~.) +
ylim(c(-1,1)) +
theme_bw()
library(fortify)
libraryggplot
library(ggplot)
install.packages("fortify")
install.packages("ggplot2")
rollingcorr.1m <- rollapply(z.logrtn,
width=30,
FUN = function(Z)
{
return(cor(Z,use="pairwise.complete.obs")[ut])
},
by.column=FALSE, align="right")
colnames(rollingcorr.1m) <- n
rollingcorr.1m.df <- ggfortify(rollingcorr.1m,melt=TRUE)
ggplot2(rollingcorr.1m.df,aes(x=Index)) +
geom_ribbon(aes(ymin=0,ymax=Value)) +
facet_grid(Series~.) +
ylim(c(-1,1)) +
theme_bw()
library("ggplot2", lib.loc="~/R/win-library/3.3")
library("ggfortify", lib.loc="~/R/win-library/3.3")
rollingcorr.1m <- rollapply(z.logrtn,
width=30,
FUN = function(Z)
{
return(cor(Z,use="pairwise.complete.obs")[ut])
},
by.column=FALSE, align="right")
colnames(rollingcorr.1m) <- n
rollingcorr.1m.df <- ggfortify(rollingcorr.1m,melt=TRUE)
ggplot2(rollingcorr.1m.df,aes(x=Index)) +
geom_ribbon(aes(ymin=0,ymax=Value)) +
facet_grid(Series~.) +
ylim(c(-1,1)) +
theme_bw()
library(ggplot2)
library(ggfortify)
rollingcorr.1m <- rollapply(z.logrtn,
width=30,
FUN = function(Z)
{
return(cor(Z,use="pairwise.complete.obs")[ut])
},
by.column=FALSE, align="right")
colnames(rollingcorr.1m) <- n
rollingcorr.1m.df <- ggfortify(rollingcorr.1m,melt=TRUE)
ggplot2(rollingcorr.1m.df,aes(x=Index)) +
geom_ribbon(aes(ymin=0,ymax=Value)) +
facet_grid(Series~.) +
ylim(c(-1,1)) +
theme_bw()
library(zoo)
library(ggplot2)
library(tseries)
spy <- get.hist.quote(instrument="SPY", start="2003-01-01",
end=Sys.Date(), quote="AdjClose",
provider="yahoo", origin="1970-01-01",
compression="d", retclass="zoo")
ief <- get.hist.quote(instrument="IEF", start="2003-01-01",
end=Sys.Date(), quote="AdjClose",
provider="yahoo", origin="1970-01-01",
compression="d", retclass="zoo")
z <- merge.zoo(spy,ief)
z.logrtn <- diff(log(z))
rollingbeta <- rollapply(z.logrtn,
width=262,
FUN = function(Z)
{
t = lm(formula=SPY~IEF, data = as.data.frame(Z), na.rm=T);
return(t$coef)
},
by.column=FALSE, align="right")
rollingbeta.df <- fortify(rollingbeta,melt=TRUE)
ggplot(rollingbeta.df) + geom_line(aes(x=Index,y=Value)) + facet_grid(Series~.) + theme_bw()
library(zoo)
library(ggplot2)
library(tseries)
spy <- get.hist.quote(instrument="SPY", start="2003-01-01",
end=Sys.Date(), quote="AdjClose",
provider="yahoo", origin="1970-01-01",
compression="d", retclass="zoo")
ief <- get.hist.quote(instrument="IEF", start="2003-01-01",
end=Sys.Date(), quote="AdjClose",
provider="yahoo", origin="1970-01-01",
compression="d", retclass="zoo")
z <- merge.zoo(spy,ief)
z.logrtn <- diff(log(z))
rollingbeta <- rollapply(z.logrtn,
width=262,
FUN = function(Z)
{
t = lm(formula=spy~ief, data = as.data.frame(Z), na.rm=T);
return(t$coef)
},
by.column=FALSE, align="right")
rollingbeta.df <- fortify(rollingbeta,melt=TRUE)
ggplot(rollingbeta.df) + geom_line(aes(x=Index,y=Value)) + facet_grid(Series~.) + theme_bw()
by.column=FALSE, align="right")
rollingbeta.df <- fortify(rollingbeta,melt=TRUE)
ggplot(rollingbeta.df) + geom_line(aes(x=Index,y=Value)) + facet_grid(Series~.) + theme_bw()
warnings()
library(zoo)
library(ggplot2)
library(tseries)
spy <- get.hist.quote(instrument="SPY", start="2003-01-01",
end=Sys.Date(), quote="AdjClose",
provider="yahoo", origin="1970-01-01",
compression="d", retclass="zoo")
ief <- get.hist.quote(instrument="IEF", start="2003-01-01",
end=Sys.Date(), quote="AdjClose",
provider="yahoo", origin="1970-01-01",
compression="d", retclass="zoo")
z <- merge.zoo(spy,ief)
z.logrtn <- diff(log(z))
rollingbeta <- rollapply(z.logrtn,
width=262,
FUN = function(Z)
{
t = lm(formula=spy~ief, data = as.data.frame(Z), na.rm=T);
return(t$coef)
},
by.column=FALSE, align="right")
)
)))))))
rollingbeta.df <- fortify(rollingbeta,melt=TRUE)
ggplot(rollingbeta.df) + geom_line(aes(x=Index,y=Value)) + facet_grid(Series~.) + theme_bw()
View(rollingbeta.df)
rollingbeta.30 <- rollapply(z.logrtn,
width=30,
FUN = function(Z)
{
t = lm(formula=spy~ief, data = as.data.frame(Z), na.rm=T);
return(t$coef)
},
by.column=FALSE, align="right")
)
))
rollingbeta <- rollapply(z.logrtn,
width=262,
FUN = function(Z)
{t = lm(formula=spy~ief, data = as.data.frame(Z), na.rm=T);return(t$coef)},
by.column=FALSE, align="right")
rm(rollingbeta.30)
)))))))))))))))))))))))))
View(rollingbeta.df)
gld <- get.hist.quote(instrument="GLD", start="2003-01-01",
end=Sys.Date(), quote="AdjClose",
provider="yahoo", origin="1970-01-01",
compression="d", retclass="zoo")
z <- merge.zoo(spy,ief,gld)
colnames(z) <- c("SPY","IEF","GLD")
z.logrtn <- diff(log(z))
c <- cor(z.logrtn,use="complete.obs")
c
ut <- upper.tri(c)
n <- paste(rownames(c)[row(c)[ut]],rownames(c)[col(c)[ut]])
rollingcorr.1m <- rollapply(z.logrtn,
width=30,
FUN = function(Z)
{
return(cor(Z,use="pairwise.complete.obs")[ut])
},
by.column=FALSE, align="right")
colnames(rollingcorr.1m) <- n
rollingcorr.1m.df <- fortify(rollingcorr.1m,melt=TRUE)
ggplot(rollingcorr.1m.df,aes(x=Index)) +
geom_ribbon(aes(ymin=0,ymax=Value)) +
facet_grid(Series~.) +
ylim(c(-1,1)) +
theme_bw()
rm(rollingbeta.df)
rm(rollingbeta)
