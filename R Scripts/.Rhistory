getwd()
library(quantmod)
install.packages(quantmod)
install.packages("C:/Users/Michael/Downloads/quantmod_0.4-6.zip", repos = NULL, type = "win.binary")
library(quantmod)
library(quantmod)
install.packages(xts)
install.packages("C:/Users/Michael/Downloads/xts_0.9-7.zip", repos = NULL, type = "win.binary")
library("quantmod", lib.loc="~/R/win-library/3.3")
library("xts", lib.loc="~/R/win-library/3.3")
install.packages("C:/Users/Michael/Downloads/zoo_1.7-13.zip", repos = NULL, type = "win.binary")
library("quantmod", lib.loc="~/R/win-library/3.3")
library("xts", lib.loc="~/R/win-library/3.3")
install.packages("C:/Users/Michael/Downloads/zoo_1.7-13.zip", repos = NULL, type = "win.binary")
library("quantmod", lib.loc="~/R/win-library/3.3")
install.packages("C:/Users/Michael/Downloads/TTR_0.23-1.zip", repos = NULL, type = "win.binary")
library("quantmod", lib.loc="~/R/win-library/3.3")
library("xts", lib.loc="~/R/win-library/3.3")
library("zoo", lib.loc="~/R/win-library/3.3")
getSymbols.yahoo("AAPL",
env=.GlobalEnv,
return.class = 'xts',
from = "2007-01-01",
to = Sys.Date(),
...)
getSymbols.yahoo("AAPL",
env=.GlobalEnv,
return.class = 'xts',
from = "2007-01-01",
to = Sys.Date(),)
aapl
AAPL
install.packages("fBasics")
`d-ibmln` <- read.table("C:\\Users\\Michael\\AppData\\Local\\Temp\\RtmpA38mOy\\data97c2a9850f9", quote="\"", comment.char="")
View(`d-ibmln`)
`d-ibm3dx7008` <- read.delim("C:\\Users\\Michael\\AppData\\Local\\Temp\\RtmpA38mOy\\data97c1b041cc8")
View(`d-ibm3dx7008`)
dim(da)
da <- -ibm3dx7008
da <- d-`d-ibm3dx7008`
da <- `d-ibm3dx7008`
dim(da)
da[1,]
ibm=da[,2]
sibm=ibm*100
basicStats(sibm)
install.packages("PerformanceAnalytics")
library("PerformanceAnalytics", lib.loc="~/R/win-library/3.3")
basicStats(sibm)
library("quantmod", lib.loc="~/R/win-library/3.3")
library("stabledist", lib.loc="~/R/win-library/3.3")
library("timeDate", lib.loc="~/R/win-library/3.3")
library("gss", lib.loc="~/R/win-library/3.3")
library("fBasics", lib.loc="~/R/win-library/3.3")
library("timeSeries", lib.loc="~/R/win-library/3.3")
library("TTR", lib.loc="~/R/win-library/3.3")
library("xts", lib.loc="~/R/win-library/3.3")
library("zoo", lib.loc="~/R/win-library/3.3")
basicStats(sibm)
getwd()
setwd("~/GitHub/Finance_R_Files/R Scripts")
librry(fradr)
lubrary(fredr)
library(fredr)
install.packages(fredr)
install.packages("C:/Users/Michael/Downloads/FredR-master.zip", repos = NULL, type = "win.binary")
library(`FredR-master`)
install.packages("C:/Users/Michael/Downloads/FredR-master.zip", repos = NULL, type = "win.binary")
# install.packages("devtools")
devtools::install_github("sboysel/fredr")
install.packages("devtools")
devtools::install_github("sboysel/fredr")
> fredr_key("58009e7b98595c8405fcb15ec6851d64")
fredr_key("58009e7b98595c8405fcb15ec6851d64")
Sys.getenv('FRED_API_KEY')
fredr_series(series_id = "HOUST",
observation_start = "1990-01-01",
observation_end = "1995-01-01")
library(fredr)
library(fredr)
fredr_search(search_text = "housing")
fredr_key("58009e7b98595c8405fcb15ec6851d64")
fredr_series(series_id = "HOUST",
observation_start = "1990-01-01",
observation_end = "1995-01-01")
fredr_search(search_text = "housing")
library(dplyr)
library(ggfortify)
fredr_series(series_id = "GNPCA",
units = "log") %>%
autoplot()
install.packages(ggfortify)
fredr_search(search_text = "housing")
install.packages("DBI")
fredr_search(search_text = "housing")
install.packages("assertthat")
fredr_search(search_text = "housing")
install.packages("Rcpp")
fredr_search(search_text = "housing")
fredr_search(search_text = "housing")
install.packages("Rcpp")
fredr_search(search_text = "housing")
install.packages("magrittr")
fredr_search(search_text = "housing")
install.packages("tibble")
fredr_search(search_text = "housing")
fredr_series(series_id = "HOUST",
observation_start = "1990-01-01",
observation_end = "1995-01-01")
fredr_series(series_id = "UNRATE",
observation_start = "1990-01-01",
frequency = "q",
units = "chg")
fredr_series(series_id = "GNPCA",
units = "log") %>%
autoplot()
fredr_series(series_id = "GNPCA",
units = "log")
autoplot()
install.packages("curl")
fredr_series(series_id = "NMFCI", observation_start = "2008-01-01", frequency = "m", units = "lin")
fredr_series(series_id = "NMFCI", observation_start = "2008-01-01", frequency = "m", units = "lin")
library(dplyr)
library(ggfortify)
fredr_series(series_id = "GNPCA",
units = "log") %>%
autoplot()
devtools::install_github("ycharts/ycharts-api-r-client")
devtools::install_github("ycharts/ycharts-api-r-client/tree/master/R")
install.packages("RCurl",repos='http://cran.rstudio.com/')
install.packages("rjson",repos='http://cran.rstudio.com/')
library("RCurl")
library("rjson")
setClass (Class = "YChartsApiClient",
representation = representation(
api_key="ANY",
base_url="ANY",
funct = "function"
),
prototype = list ( api_key="", base_url="https://ycharts.com/api/v3/",
funct = function (.Object) { print (.Object) }   ),
)
setGeneric("fetch_data",  function(.Object, y_url, params="") standardGeneric("fetch_data"))
setMethod("fetch_data",  "YChartsApiClient",
function(.Object, y_url, params='') {
if ( params != "" ) y_url = paste(y_url, params, sep='', collapse='')
headers=list('X-YCHARTSAUTHORIZATION'=.Object@api_key)
print (headers)
return (getURL ( y_url, httpheader = headers, ssl.verifypeer = FALSE ))
})
setGeneric("get_company_info", function(.Object, companies, info_fields) standardGeneric("get_company_info"))
setMethod("get_company_info", "YChartsApiClient",
function(.Object, companies, info_fields) {
companies = paste(companies, sep=',', collapse=',')
info_fields = paste(info_fields, sep=',', collapse=',')
y_url = paste (.Object@base_url, paste('companies', companies, 'info', info_fields, sep='/', collapse=NULL), sep='', collapse=NULL)
json_data = fetch_data(.Object, y_url)
return (fromJSON(json_data))
setGeneric("fetch_data",  function(.Object, y_url, params="I:USGDP") standardGeneric("fetch_data"))
setGeneric("fetch_data",  function(.Object, y_url, params="I:USGDP") standardGeneric("fetch_data"))
l
dawdwa
library(sadad)
)
setGeneric("fetch_data",  function(.Object, y_url, params="I:USGDP") standardGeneric("fetch_data"))
setMethod("fetch_data",  "YChartsApiClient",
+           function(.Object, y_url, params='') {
+               if ( params != "" ) y_url = paste(y_url, params, sep='', collapse='')
+               headers=list('X-YCHARTSAUTHORIZATION'=.Object@api_key)
+               print (headers)
+               return (getURL ( y_url, httpheader = headers, ssl.verifypeer = FALSE ))
+           })
setMethod("fetch_data",  "YChartsApiClient",
+           function(.Object, y_url, params='I:USGDP') {
+               if ( params != "" ) y_url = paste(y_url, params, sep='', collapse='')
+               headers=list('X-YCHARTSAUTHORIZATION'=.Object@api_key)
+               print (headers)
+               return (getURL ( y_url, httpheader = headers, ssl.verifypeer = FALSE ))
+           })
setMethod("fetch_data",  "YChartsApiClient",
+           function(.Object, y_url, params='I:USGDP') {if ( params != "I:USGDP" ) y_url = paste(y_url, params, sep='', collapse='')
+               headers=list('X-YCHARTSAUTHORIZATION'=.Object@api_key)
+               print (headers)
+               return (getURL ( y_url, httpheader = headers, ssl.verifypeer = FALSE ))
+           })
setMethod("fetch_data",  "YChartsApiClient",
+           +           function(.Object, y_url, params='I:USGDP') {
+               +               if ( params != "" ) y_url = paste(y_url, params, sep='I:USGDP', collapse='')
+               +               headers=list('X-YCHARTSAUTHORIZATION'=.Object@api_key)
+               +               print (headers)
+               +               return (getURL ( y_url, httpheader = headers, ssl.verifypeer = FALSE ))
+               +           })
getwd()
IUSGDP_source_data <- read.csv("C:/Users/Michael/Downloads/IUSGDP_source_data.zip", sep="")
View(IUSGDP_source_data)
View(IUSGDP_source_data)
rm(IUSGDP_source_data)
gdp <- read.csv("C:/Users/Michael/Downloads/gdp.xls", sep="")
View(gdp)
setMethod("fetch_data",  "YChartsApiClient",
+           function(.Object, y_url, params='') {
+               if ( params != "" ) y_url = paste(y_url, params, sep='', collapse='')
+               headers=list('X-YCHARTSAUTHORIZATION'=.Object@api_key)
+               print (headers)
+               return (getURL ( y_url, httpheader = headers, ssl.verifypeer = FALSE ))
setMethod("fetch_data",  "YChartsApiClient",
+           function(.Object, y_url, params='') {
+               if ( params != "" ) y_url = paste(y_url, params, sep='', collapse='')
+               headers=list('X-YCHARTSAUTHORIZATION'=.Object@api_key)
+               print (headers)
+               return (getURL ( y_url, httpheader = headers, ssl.verifypeer = FALSE ))
+           })
getwd()
setGeneric("get_company_data_point", function(.Object, companies, metrics, date_attr='') standardGeneric("get_company_data_point"))
setMethod("get_company_data_point", "YChartsApiClient",
function(.Object, companies, metrics, date_attr='') {
companies = paste(companies, sep=',', collapse=',')
metrics = paste(metrics, sep=',', collapse=',')
y_url = paste (.Object@base_url, paste('companies', companies, 'points', metrics, sep='/', collapse=NULL), sep='', collapse=NULL)
params = ''
if (date_attr != '' ) {
params = URLencode( paste('?date=', date_attr, sep='', collapse=NULL) )
}
json_data = fetch_data(.Object, y_url, params)
return (fromJSON(json_data))
})
get_company_data_point('price',"AAPL")
setGeneric("get_company_data_point", function(.Object, companies, metrics, date_attr='') standardGeneric("get_company_data_point"))
setMethod("get_company_data_point", "YChartsApiClient",
function(.Object, companies, metrics, date_attr='') {
companies = paste(companies, sep=',', collapse=',')
metrics = paste(metrics, sep=',', collapse=',')
y_url = paste (.Object@base_url, paste('companies', companies, 'points', metrics, sep='/', collapse=NULL), sep='', collapse=NULL)
params = ''
if (date_attr != '' ) {
params = URLencode( paste('?date=', date_attr, sep='', collapse=NULL) )
}
json_data = fetch_data(.Object, y_url, params)
return (fromJSON(json_data))
})
get_company_data_point(.Object = ,"AAPL")
list(objects)
list(.Objects)
get_company_data_point(,"AAPL")
get_company_data_point(setMethod(),"AAPL")
get_company_data_point(data.frame(),"AAPL")
sac = new ("YChartsApiClient", api_key=' OK/bRlCfem/K+BXruue8Ng') # Enter the Key here. See http://ycharts.com/accounts/my_account
test_info = get_company_info(sac, list('AAPL', 'MSFT'), list('exchange', 'industry'))
test_points = get_company_data_point(sac, list('AAPL', 'MSFT'), list('price', 'pe_ratio'), '2016-03-03')
test_series = get_company_data_timeseries(sac, list('AAPL', 'MSFT'), list('price'), '2016-3-3', '2016-3-15')
sac = new ("YChartsApiClient", api_key=' OK/bRlCfem/K+BXruue8Ng')
test_info = get_company_info(sac, list('AAPL', 'MSFT'), list('exchange', 'industry'))
print (test_info)
rm(gdp_
)
rm(GDP)
View(gdp)
rm(gdp)
test_info = get_company_info(sac, list('AAPL', 'MSFT'), list('exchange', 'industry'))
sac = new ("YChartsApiClient", api_key='OK/bRlCfem/K+BXruue8Ng')
test_info = get_company_info(sac, list('AAPL', 'MSFT'), list('exchange', 'industry'))
